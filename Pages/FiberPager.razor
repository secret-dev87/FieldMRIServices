@page "/fiber"


@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs

@inject IFiberService fiberService
@inject NavigationManager navigationManager
@inject IJSRuntime js

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div>

                <h1 class="oi oi-briefcase">&nbsp &nbsp Mo Disk</h1>
            </div>
            <div class="card-body">
                <SfGrid DataSource="@fiberModels" AllowPaging="true" AllowTextWrap="true" AllowPdfExport="true" Toolbar="@(new List<string>() {"Add","Edit","Update","Delete","Cancel","Search"})" AllowSelection="true" @ref="Grid">
                    <GridEvents OnBeginEdit="BeginEditHandler" OnActionBegin="ActionBeginHandler" TValue="ModiskModel"></GridEvents>
                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(FiberModel.Id) IsPrimaryKey="true" HeaderText="Id" Width="100"></GridColumn>
                        <GridColumn HeaderText="Image" Width="120">
                            <Template>
                                @{
                                    var fiber = (context as FiberModel);
                                    <div class="image">
                                        <img src="@fiber.GeneralImage" alt="@fiber.GeneralImage" width="100" height="100" />
                                    </div>
                                }
                            </Template>
                        </GridColumn>


                        <GridColumn Field=@nameof(FiberModel.Model) IsPrimaryKey="true" HeaderText="Name" Width="200"></GridColumn>
                        <GridColumn Field=@nameof(FiberModel.Serial) IsPrimaryKey="true" HeaderText="Serial" Width="200"></GridColumn>
                        <GridColumn Field=@nameof(FiberModel.Status) IsPrimaryKey="true" HeaderText="Status" Width="200"></GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>
</div>

<style>
    .e-grid .e-headercelldiv {
        font-size: 20px;
        text-align: left;
    }

    h1 {
        margin-left: 550px
    }

    .e-textbox {
        vertical-align: top;
    }

    div .e-mappingguid {
        height: 30px;
    }

    .e-grid .e-rowcell {
        font-size: 20px;
        height: 60px;
    }

    .text {
        height: 100px;
    }

    div#Grid_dialogEdit_wrapper {
        max-height: none !important;
    }

    .multiline {
        width: 60%;
        height: 135px;
        margin-top: -25px;
    }

    /* To specify height and font size */
    .e-input:not(:valid), .e-input:valid, .e-float-input.e-control-wrapper input:not(:valid), .e-float-input.e-control-wrapper input:valid, .e-float-input input:not(:valid), .e-float-input input:valid, .e-input-group input:not(:valid), .e-input-group input:valid, .e-input-group.e-control-wrapper input:not(:valid), .e-input-group.e-control-wrapper input:valid, .e-float-input.e-control-wrapper textarea:not(:valid), .e-float-input.e-control-wrapper textarea:valid, .e-float-input textarea:not(:valid), .e-float-input textarea:valid, .e-input-group.e-control-wrapper textarea:not(:valid), .e-input-group.e-control-wrapper textarea:valid, .e-input-group textarea:not(:valid), .e-input-group textarea:valid {
        font-size: 20px;
        height: 30px;
    }
</style>


@code {



    SfGrid<FiberModel> Grid;
    List<FiberModel> fiberModels = new();

    protected override async Task OnInitializedAsync()
    {
        fiberModels = await fiberService.GetFiberAsync();
    }

    //When toolbar item is clicked
    public async Task ActionBeginHandler(ActionEventArgs<ModiskModel> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add))
            navigationManager.NavigateTo("/fiberpage");

        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            bool confirm = await js.InvokeAsync<bool>("window.confirm", "Are you sure you want to really delete?");
            if (confirm)
            {
                await fiberService.DeleteFiberAsync(Args.RowData.Id);
                fiberModels = (await fiberService.GetFiberAsync()).ToList();
                await Grid.Refresh();
            }
        }
    }

    public void BeginEditHandler(BeginEditArgs<ModiskModel> args) => navigationManager.NavigateTo($"modisk/{args.RowData.Id}");
}
