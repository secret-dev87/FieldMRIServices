// <auto-generated />
using System;
using FieldMRIServices.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FieldMRIServices.Migrations
{
    [DbContext(typeof(FMIventoryDbContext))]
    [Migration("20240623004014_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("FieldMRIServices.Entities.Computer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCodes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneralImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("HardDrive")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Memory")
                        .HasColumnType("TEXT");

                    b.Property<string>("MultipleCom")
                        .HasColumnType("TEXT");

                    b.Property<string>("Network")
                        .HasColumnType("TEXT");

                    b.Property<string>("Player")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qty")
                        .HasColumnType("TEXT");

                    b.Property<string>("SCSI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Serial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.Property<string>("Video")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.ComputerPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ComputerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("ComputerPhotos");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Fiber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCodes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneralImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufactor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qty")
                        .HasColumnType("TEXT");

                    b.Property<string>("Serial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Fibers");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.FiberPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<int>("FiberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FiberId");

                    b.ToTable("FiberPhotos");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Harddrive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCodes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneralImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Harddrives")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qty")
                        .HasColumnType("TEXT");

                    b.Property<string>("Serial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Harddrives");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.HarddrivePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("InventoryName")
                        .HasColumnType("TEXT");

                    b.Property<int>("harddriveId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("harddriveId");

                    b.ToTable("HarddrivePhotos");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.IEEE", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCodes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneralImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qunity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Serial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IEEEs");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.IEEEPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<int>("IEEEId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModiskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IEEEId")
                        .IsUnique();

                    b.HasIndex("MemoryId");

                    b.HasIndex("ModiskId");

                    b.ToTable("IEEEPhoto");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCodes")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateRemoved")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateReturned")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneralImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("InventoryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pin")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qty")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemovedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReturnedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Serial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Memory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCodes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneralImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qunity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Memories");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.MemoryPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MemoryId");

                    b.ToTable("MemoryPhotos");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Modisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCodes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneralImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qty")
                        .HasColumnType("TEXT");

                    b.Property<string>("Serial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Modisks");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.MonitorPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<int>("MonitorsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MonitorsId");

                    b.ToTable("MonitorPhotos");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Monitors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCodes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneralImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufactor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qty")
                        .HasColumnType("TEXT");

                    b.Property<string>("Resolution")
                        .HasColumnType("TEXT");

                    b.Property<string>("Serial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Monitores");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.MosdiskPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneralImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Serial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<int>("modiskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("modiskId");

                    b.ToTable("ModiskPhotos");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<int>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InventoryName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCodes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneralImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qty")
                        .HasColumnType("TEXT");

                    b.Property<string>("Serial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.VideoPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneralImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<int>("VideoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoPhotos");
                });

            modelBuilder.Entity("FieldMRIServices.Model.IEEEPhotosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<int>("IEEEId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IEEEId");

                    b.ToTable("IEEEPhotos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FieldMRIServices.Entities.ComputerPhoto", b =>
                {
                    b.HasOne("FieldMRIServices.Entities.Computer", "Computer")
                        .WithMany("ComputerPhotos")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Computer");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.FiberPhoto", b =>
                {
                    b.HasOne("FieldMRIServices.Entities.Fiber", "Fiber")
                        .WithMany("FiberPhoto")
                        .HasForeignKey("FiberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fiber");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.HarddrivePhoto", b =>
                {
                    b.HasOne("FieldMRIServices.Entities.Harddrive", "Harddrive")
                        .WithMany("HarddrivePhoto")
                        .HasForeignKey("harddriveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Harddrive");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.IEEEPhoto", b =>
                {
                    b.HasOne("FieldMRIServices.Entities.IEEE", "IEEE")
                        .WithOne("IEEEPhoto")
                        .HasForeignKey("FieldMRIServices.Entities.IEEEPhoto", "IEEEId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMRIServices.Entities.Memory", "Memory")
                        .WithMany()
                        .HasForeignKey("MemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldMRIServices.Entities.Modisk", null)
                        .WithMany("IEEEPhotos")
                        .HasForeignKey("ModiskId");

                    b.Navigation("IEEE");

                    b.Navigation("Memory");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.MemoryPhoto", b =>
                {
                    b.HasOne("FieldMRIServices.Entities.Memory", "Memory")
                        .WithMany("MemoryPhoto")
                        .HasForeignKey("MemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Memory");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.MonitorPhoto", b =>
                {
                    b.HasOne("FieldMRIServices.Entities.Monitors", "Monitors")
                        .WithMany("MonitorPhoto")
                        .HasForeignKey("MonitorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monitors");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.MosdiskPhoto", b =>
                {
                    b.HasOne("FieldMRIServices.Entities.Modisk", "Modisk")
                        .WithMany()
                        .HasForeignKey("modiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modisk");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Photo", b =>
                {
                    b.HasOne("FieldMRIServices.Entities.Inventory", "Inventory")
                        .WithMany("Photos")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.VideoPhoto", b =>
                {
                    b.HasOne("FieldMRIServices.Entities.Video", "Video")
                        .WithMany("VideoPhoto")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("FieldMRIServices.Model.IEEEPhotosModel", b =>
                {
                    b.HasOne("FieldMRIServices.Entities.IEEE", "IEEE")
                        .WithMany()
                        .HasForeignKey("IEEEId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IEEE");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Computer", b =>
                {
                    b.Navigation("ComputerPhotos");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Fiber", b =>
                {
                    b.Navigation("FiberPhoto");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Harddrive", b =>
                {
                    b.Navigation("HarddrivePhoto");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.IEEE", b =>
                {
                    b.Navigation("IEEEPhoto");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Inventory", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Memory", b =>
                {
                    b.Navigation("MemoryPhoto");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Modisk", b =>
                {
                    b.Navigation("IEEEPhotos");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Monitors", b =>
                {
                    b.Navigation("MonitorPhoto");
                });

            modelBuilder.Entity("FieldMRIServices.Entities.Video", b =>
                {
                    b.Navigation("VideoPhoto");
                });
#pragma warning restore 612, 618
        }
    }
}
